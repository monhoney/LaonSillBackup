/*
 * Debug.h
 *
 *  Created on: 2016. 8. 17.
 *      Author: jhkim
 */

#ifndef DEBUG_H_
#define DEBUG_H_


#include <cstdint>

#include "common.h"
#include "DataSet.h"
#include "MockDataSet.h"
#include "ImagePackDataSet.h"
#include "ConvLayer.h"
#include "DepthConcatLayer.h"
#include "FullyConnectedLayer.h"
#include "InputLayer.h"
#include "RoIInputLayer.h"
#include "CelebAInputLayer.h"
#include "DummyInputLayer.h"
#include "RoITestInputLayer.h"
#include "LayerConfig.h"
#include "LRNLayer.h"
#include "ReshapeLayer.h"
#include "PoolingLayer.h"
#include "SoftmaxLayer.h"
#include "SoftmaxWithLossLayer.h"
#include "SmoothL1LossLayer.h"
#include "SplitLayer.h"
#include "AnchorTargetLayer.h"
#include "ProposalLayer.h"
#include "ProposalTargetLayer.h"
#include "RoIPoolingLayer.h"
#include "Pooling.h"
#include "Param.h"
#include "FrcnnTestOutputLayer.h"
#include "BatchNormLayer.h"
#include "ReluLayer.h"
#include "CrossEntropyWithLossLayer.h"
#include "Sigmoid2Layer.h"
#include "NoiseInputLayer.h"
#include "HyperTangentLayer.h"
#include "KistiInputLayer.h"
#include "VOCPascalInputLayer.h"
#include "ILSVRCInputLayer.h"
#include "DropOutLayer.h"
#include "YOLOLossLayer.h"
#include "Network.h"

template <typename Dtype> class DataSet;
template <typename Dtype> class LayersConfig;



#if 0
//#define OUTPUTLAYER




template <typename Dtype>
DataSet<Dtype>* createMnistDataSet() {
	DataSet<Dtype>* dataSet = new ImagePackDataSet<Dtype>(
			std::string(SPARAM(BASE_DATA_DIR)) + std::string("/mnist/train_data"),
			std::string(SPARAM(BASE_DATA_DIR)) + std::string("/mnist/train_label"),
			1,
			std::string(SPARAM(BASE_DATA_DIR)) + std::string("/mnist/test_data"),
			std::string(SPARAM(BASE_DATA_DIR)) + std::string("/mnist/test_label"),
			1);
	dataSet->setMean({0.13066047740});
	return dataSet;

}

template <typename Dtype>
DataSet<Dtype>* createMockDataSet() {
	DataSet<Dtype>* dataSet = new MockDataSet<Dtype>(
			224,
			224,
			3,
			10,
			10,
			1000);
	dataSet->setMean({0.0, 0.0, 0.0});
	return dataSet;
}

template <typename Dtype>
DataSet<Dtype>* createSampleDataSet() {
	DataSet<Dtype>* dataSet = new ImagePackDataSet<Dtype>(
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/sample/train_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/sample/train_label"),
			3,
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/sample/train_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/sample/train_label"),
			1);
	dataSet->setMean({0.0, 0.0, 0.0});
	return dataSet;
}

template <typename Dtype>
DataSet<Dtype>* createImageNet1000DataSet() {
	DataSet<Dtype>* dataSet = new ImagePackDataSet<Dtype>(
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/1000/train_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/1000/train_label"),
			1,
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/1000/test_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/1000/test_label"),
			1);
	dataSet->setMean({0.47684615850, 0.45469805598, 0.41394191980});
	return dataSet;
}

template <typename Dtype>
DataSet<Dtype>* createImageNet10000DataSet() {
	DataSet<Dtype>* dataSet = new ImagePackDataSet<Dtype>(
			std::string(SPARAM(BASE_DATA_DIR)) 
                + std::string("/ILSVRC2012/save/10000/train_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/10000/train_label"),
			40,
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/10000/test_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/10000/test_label"),
			1);
	dataSet->setMean({0.47684615850, 0.45469805598, 0.41394191980});
	return dataSet;
}

template <typename Dtype>
DataSet<Dtype>* createImageNet50000DataSet() {
	DataSet<Dtype>* dataSet = new ImagePackDataSet<Dtype>(
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/50000/train_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/50000/train_label"),
			1,
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/50000/test_data"),
			std::string(SPARAM(BASE_DATA_DIR))
                + std::string("/ILSVRC2012/save/50000/test_label"),
			1);
	dataSet->setMean({0.47684615850, 0.45469805598, 0.41394191980});
	return dataSet;
}

template <typename Dtype>
LayersConfig<Dtype>* createDQNLayersConfig() {
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename ALEInputLayer<Dtype>::Builder())
					->id(0)
					->name("inputLayer")
					->outputs({"data", "label"})
					->sourceType("ALE")
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("convLayer1")
					->filterDim(8, 8, 4, 32, 3, 4)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0002)
					->inputs({"data"})
					->outputs({"conv1/8x8"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(2)
					->name("convLayer2")
					->filterDim(4, 4, 32, 64, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0002)
					->inputs({"conv1/8x8"})
					->outputs({"conv2/4x4"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("convLayer3")
					->filterDim(3, 3, 64, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0002)
					->inputs({"conv2/4x4"})
					->outputs({"conv3/3x3"}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(4)
					->name("fullyConnectedLayer1")
					->nOut(512)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0002)
					->inputs({"conv3/3x3"})
					->outputs({"fc1"}))
			->layer((new typename DQNOutputLayer<Dtype>::Builder())
					->id(5)
					->name("DQNOutputLayer2")
					->nOut(4)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0002)
					->inputs({"fc1", "label"})
					->outputs({"dqn1"}))
			->build();

	return layersConfig;
}

template <typename Dtype>
LayersConfig<Dtype>* createLeNetLayersConfig() {
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("mnist")
					->source(std::string(SPARAM(BASE_DATA_DIR))
						+ std::string("/mnist"))
					->sourceType("ImagePack")
					->mean({0.13066047740})
					->outputs({"data", "label"})
					)

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1")
					->filterDim(5, 5, 1, 20, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"data"})
					->outputs({"conv1"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(2)
					->name("pool1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv1"})
					->outputs({"pool1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("conv2")
					->filterDim(5, 5, 20, 50, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool1"})
					->outputs({"conv2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(4)
					->name("pool2")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv2"})
					->outputs({"pool2"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(5)
					->name("ip1")
					->nOut(500)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool2"})
					->outputs({"ip1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(6)
					->name("relu1")
					->inputs({"ip1"})
					->outputs({"relu1"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(7)
					->name("ip2")
					->nOut(10)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"relu1"})
					->outputs({"ip2"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(8)
					->name("loss")
					->inputs({"ip2", "label"})
					->outputs({"loss"}))

			->build();

	return layersConfig;
}


template <typename Dtype>
LayersConfig<Dtype>* createSplitLayersConfig() {
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("mnist")
					->source(std::string(SPARAM(BASE_DATA_DIR))
						+ std::string("/mnist"))
					->sourceType("ImagePack")
					->mean({0.13066047740})
					->outputs({"data", "label"})
					)

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1layer")
					->filterDim(5, 5, 1, 20, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"data"})
					->outputs({"conv1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(100)
					->name("relu0")
					->inputs({"conv1"})
					->outputs({"conv1"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(2)
					->name("pool1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv1"})
					->outputs({"pool1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(101)
					->name("conv3")
					->filterDim(5, 5, 20, 50, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"conv1"})
					->outputs({"conv3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("conv2")
					->filterDim(5, 5, 20, 50, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool1"})
					->outputs({"conv2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(4)
					->name("pool2")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv2"})
					->outputs({"pool2"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(5)
					->name("ip1")
					->nOut(500)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool2"})
					->outputs({"ip1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(6)
					->name("relu1")
					->inputs({"ip1"})
					->outputs({"relu1"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(7)
					->name("ip2")
					->nOut(10)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"relu1"})
					->outputs({"ip2"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(8)
					->name("loss")
					->inputs({"ip2", "label"})
					->outputs({"loss"}))

			->build();

	return layersConfig;
}

template <typename Dtype>
LayersConfig<Dtype>* createInceptionLayersConfig() {
	const float bias_const = 0.2f;
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("data")

					//->source(std::string(SPARAM(BASE_DATA_DIR))
					//	+ std::string("/ilsvrc"))
					//->sourceType("ImagePack")
					//->mean({0.13066047740})

					->source(std::string(SPARAM(BASE_DATA_DIR))
						+ std::string("/ILSVRC2012/save/10000"))
					->sourceType("ImagePack")
					->mean({123.0f, 117.0f, 104.0f})

					->outputs({"data", "label"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1/7x7_s2")
					->filterDim(7, 7, 3, 64, 3, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"data"})
					->outputs({"conv1/7x7_s2"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(2)
					->name("conv1/relu_7x7")
					->inputs({"conv1/7x7_s2"})
					->outputs({"conv1/7x7_s2"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("pool1/3x3_s2")
					->poolDim(3, 3, 0, 2)
					->poolingType(Pooling<Dtype>::Max)
					->inputs({"conv1/7x7_s2"})
					->outputs({"pool1/3x3_s2"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(4)
					->name("pool1/norm1")
					->lrnDim(5, 0.0001, 0.75, 1.0)
					->inputs({"pool1/3x3_s2"})
					->outputs({"pool1/norm1"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(5)
					->name("conv2/3x3_reduce")
					->filterDim(1, 1, 64, 64, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool1/norm1"})
					->outputs({"conv2/3x3_reduce"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(6)
					->name("conv2/relu_3x3_reduce")
					->inputs({"conv2/3x3_reduce"})
					->outputs({"conv2/3x3_reduce"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(7)
					->name("conv2/3x3")
					->filterDim(3, 3, 64, 192, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv2/3x3_reduce"})
					->outputs({"conv2/3x3"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(8)
					->name("conv2/relu_3x3")
					->inputs({"conv2/3x3"})
					->outputs({"conv2/3x3"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(9)
					->name("conv2/norm2")
					->lrnDim(5, 0.0001, 0.75, 1.0)
					->inputs({"conv2/3x3"})
					->outputs({"conv2/norm2"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(10)
					->name("pool2/3x3_s2")
					->poolDim(3, 3, 0, 2)
					->poolingType(Pooling<Dtype>::Max)
					->inputs({"conv2/norm2"})
					->outputs({"pool2/3x3_s2"}))
			//INCEPTION 3A
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("inception_3a/1x1")
					->filterDim(1, 1, 192, 64, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/1x1"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(12)
					->name("inception_3a/relu_1x1")
					->inputs({"inception_3a/1x1"})
					->outputs({"inception_3a/1x1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(13)
					->name("inception_3a/3x3_reduce")
					->filterDim(1, 1, 192, 96, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/3x3_reduce"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(14)
					->name("inception_3a/relu_3x3_reduce")
					->inputs({"inception_3a/3x3_reduce"})
					->outputs({"inception_3a/3x3_reduce"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(15)
					->name("inception_3a/3x3")
					->filterDim(3, 3, 96, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"inception_3a/3x3_reduce"})
					->outputs({"inception_3a/3x3"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(16)
					->name("inception_3a/relu_3x3")
					->inputs({"inception_3a/3x3"})
					->outputs({"inception_3a/3x3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(17)
					->name("inception_3a/5x5_reduce")
					->filterDim(1, 1, 192, 16, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/5x5_reduce"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(18)
					->name("inception_3a/relu_5x5_reduce")
					->inputs({"inception_3a/5x5_reduce"})
					->outputs({"inception_3a/5x5_reduce"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(19)
					->name("inception_3a/5x5")
					->filterDim(5, 5, 16, 32, 2, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"inception_3a/5x5_reduce"})
					->outputs({"inception_3a/5x5"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(20)
					->name("inception_3a/relu_5x5")
					->inputs({"inception_3a/5x5"})
					->outputs({"inception_3a/5x5"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(21)
					->name("inception_3a/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(Pooling<Dtype>::Max)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/pool"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(22)
					->name("inception_3a/pool_proj")
					->filterDim(1, 1, 192, 32, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"inception_3a/pool"})
					->outputs({"inception_3a/pool_proj"}))
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(23)
					->name("inception_3a/relu_pool_proj")
					->inputs({"inception_3a/pool_proj"})
					->outputs({"inception_3a/pool_proj"}))

			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(24)
					->name("inception_3a/output")
					->propDown({true, true, true, true})
					->inputs({"inception_3a/1x1", "inception_3a/3x3",
								"inception_3a/5x5", "inception_3a/pool_proj"})
					->outputs({"inception_3a/output"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(25)
					->name("pool1")
					->poolDim(4, 4, 0, 4)
					->poolingType(Pooling<Dtype>::Max)
					->inputs({"inception_3a/output"})
					->outputs({"pool1"}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(26)
					->name("fc1")
					->nOut(1000)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool1"})
					->outputs({"fc1"}))
			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(27)
					->name("loss")
					->inputs({"fc1", "label"})
					->outputs({"loss"}))
			->build();

	return layersConfig;
}



template <typename Dtype>
LayersConfig<Dtype>* createCNNSimpleLayersConfig2() {
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("inputLayer")
					->source(std::string(SPARAM(BASE_DATA_DIR))
                        + std::string("/mnist"))
					->sourceType("ImagePack")
					->mean({0.13066047740})
					->outputs({"data", "label"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("convLayer1")
					->filterDim(3, 3, 1, 10, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->inputs({"data"})
					->outputs({"conv1/3x3_s2"}))

			->layer((new typename BatchNormLayer<Dtype>::Builder())
					->id(2)
					->name("batchnorm1")
					->inputs({"conv1/3x3_s2"})
					->outputs({"batchnorm1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(3)
					->name("relu1")
					->inputs({"batchnorm1"})
					->outputs({"relu1"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(4)
					->name("poolingLayer1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"relu1"})
					->outputs({"pool1/3x3_s1"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(5)
					->name("pool1/3x3_s1_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool1/3x3_s1"})
					->outputs({"pool1/3x3_s1_reshape"}))

			->layer((new typename BatchNormLayer<Dtype>::Builder())
					->id(6)
					->name("batchnorm2")
					->inputs({"pool1/3x3_s1_reshape"})
					->outputs({"batchnorm2"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(7)
					->name("fc1")
					->nOut(10)
					->pDropout(0.4)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"batchnorm2"})
					->outputs({"fc1"}))
			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(8)
					->name("softmaxWithLoss")
					->inputs({"fc1", "label"})
					->outputs({"prob"}))


			->build();

	return layersConfig;
}

template <typename Dtype>
LayersConfig<Dtype>* createCNNSimpleLayersConfig() {
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("inputLayer")
					->source(std::string(SPARAM(BASE_DATA_DIR))
                        + std::string("/mnist"))
					->sourceType("ImagePack")
					->mean({0.13066047740})
					->outputs({"data", "label"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("convLayer1")
					->filterDim(3, 3, 1, 10, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->inputs({"data"})
					->outputs({"conv1/3x3_s2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(2)
					->name("relu1")
					->inputs({"conv1/3x3_s2"})
					->outputs({"relu1"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("poolingLayer1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"relu1"})
					->outputs({"pool1/3x3_s1"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(4)
					->name("pool1/3x3_s1_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool1/3x3_s1"})
					->outputs({"pool1/3x3_s1_reshape"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(5)
					->name("fc1")
					->nOut(10)
					->pDropout(0.4)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool1/3x3_s1_reshape"})
					->outputs({"fc1"}))
			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(6)
					->name("softmaxWithLoss")
					->inputs({"fc1", "label"})
					->outputs({"prob"}))

			->build();

	return layersConfig;
}


template <typename Dtype>
LayersConfig<Dtype>* createCNNDoubleLayersConfig() {
	const float bias_const = 0.1;

	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("inputLayer")
					->source(std::string(SPARAM(BASE_DATA_DIR))
                        + std::string("/mnist"))
					->sourceType("ImagePack")
					->mean({0.13066047740})
					->outputs({"data", "labels"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("convLayer1")
					->filterDim(5, 5, 1, 20, 2, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"convLayer1"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(2)
					->name("poolingLayer1")
					->poolDim(3, 3, 1, 2)
					->poolingType(PoolingType::Max)
					->inputs({"convLayer1"})
					->outputs({"poolingLayer1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("convLayer2")
					->filterDim(5, 5, 20, 40, 2, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"poolingLayer1"})
					->outputs({"convLayer2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(4)
					->name("poolingLayer2")
					->poolDim(3, 3, 1, 2)
					->poolingType(PoolingType::Max)
					->inputs({"convLayer2"})
					->outputs({"poolingLayer2"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(5)
					->name("poolingLayer2_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"poolingLayer2"})
					->outputs({"poolingLayer2_reshape"}))



			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(6)
					->name("fullyConnectedLayer1")
					->nOut(4096)
					->pDropout(0.4)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Constant, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"poolingLayer2_reshape"})
					->outputs({"fullyConnectedLayer1"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(7)
					->name("softmaxLayer")
					->inputs({"fullyConnectedLayer1", "labels"})
					->outputs({"prob"}))
			->build();

	return layersConfig;
}






template <typename Dtype>
LayersConfig<Dtype>* createVggCnnM1024LayersConfig() {
	const float biasConst = 0.2;

	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("input")
					->source("/data/train_pack/ILSVRC2012/save/10000")
					->sourceType("ImagePack")
					->numTrainPack(40)
					->numTestPack(1)
					->mean({0.47684615850, 0.45469805598, 0.41394191980})
					->outputs({"data", "labels"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1")
					->filterDim(7, 7, 3, 96, 0, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"conv1"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(2)
					->name("norm1")
					->lrnDim(5, 0.0005, 0.75, 1.0)
					->inputs({"conv1"})
					->outputs({"norm1"})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("pool1")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm1"})
					->outputs({"pool1"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(4)
					->name("conv2")
					->filterDim(5, 5, 96, 256, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1"})
					->outputs({"conv2"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(5)
					->name("norm2")
					->lrnDim(5, 0.0005, 0.75, 1.0)
					->inputs({"conv2"})
					->outputs({"norm2"})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(6)
					->name("pool2")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm2"})
					->outputs({"pool2"}))



			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(7)
					->name("conv3")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2"})
					->outputs({"conv3"}))



			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv3"})
					->outputs({"conv4"}))




			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(9)
					->name("conv5")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv4"})
					->outputs({"conv5"}))





			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(10)
					->name("pool5")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv5"})
					->outputs({"pool5"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(11)
					->name("pool5_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool5"})
					->outputs({"pool5_reshape"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(12)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"pool5_reshape"})		//	-> original
					->outputs({"fc6"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(13)
					->name("fc7")
					->nOut(1024)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, biasConst)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"fc6"})
					->outputs({"fc7"}))


			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(14)
					->name("fc8")
					->nOut(1000)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Constant, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"fc8"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(15)
					->name("prob")
					->inputs({"fc8", "labels"})
					->outputs({"prob"}))
			->build();


return layersConfig;


}



template <typename Dtype>
LayersConfig<Dtype>* createFrcnnTrainOneShotLayersConfig() {
	//const float rpnWeightLr = 0.0f;
	//const float rpnBiasLr = 0.0f;
	//const float rpnWeightWd = 0.0f;
	//const float rpnBiasWd = 0.0f;

	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename RoIInputLayer<Dtype>::Builder())
					->id(0)
					->name("input-data")
					->numClasses(21)
					//->pixelMeans({102.9801f, 115.9465f, 122.7717f})	// BGR
					->pixelMeans({0.4815f, 0.4547f, 0.4038f})		// RGB
					->outputs({"data", "im_info", "gt_boxes"}))


			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1:rpn")
					->filterDim(7, 7, 3, 96, 0, 2)
					->weightUpdateParam(0, 0)
					->biasUpdateParam(0, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->propDown({false})
					->outputs({"conv1_rpn"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(2)
					->name("norm1:rpn")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv1_rpn"})
					->propDown({false})
					->outputs({"norm1_rpn"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("pool1:rpn")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm1_rpn"})
					->propDown({false})
					->outputs({"pool1_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(4)
					->name("conv2:rpn")
					->filterDim(5, 5, 96, 256, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1_rpn"})
					->propDown({false})
					->outputs({"conv2_rpn"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(5)
					->name("norm2:rpn")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv2_rpn"})
					->propDown({false})
					->outputs({"norm2_rpn"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(6)
					->name("pool2:rpn")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm2_rpn"})
					->propDown({false})
					->outputs({"pool2_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(7)
					->name("conv3:rpn")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2_rpn"})
					->propDown({false})
					->outputs({"conv3_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv4:rpn")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv3_rpn"})
					->propDown({false})
					->outputs({"conv4_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(9)
					->name("conv5:rpn")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv4_rpn"})
					->propDown({false})
					->outputs({"conv5_rpn"}))




			//===RPN===
			// roi-data에서 학습 target 계산,
			// 각 cell별 cls, pred 학습,
			//================================================
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(10)
					->name("rpn_conv/3x3")
					->filterDim(3, 3, 512, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv5_rpn"})
					->propDown({false})
					->outputs({"rpn/output"}))

			// rpn_conv 각 cell 위치에서 9개의 anchor에 대한 fg, bg score가 학습된다.
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("rpn_cls_score")
					->filterDim(1, 1, 256, 18, 0, 1)	// 2(bg/fg) * 9(anchors)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->activationType(Activation<Dtype>::NoActivation)
					->inputs({"rpn/output"})
					->propDown({false})
					->outputs({"rpn_cls_score"}))
			// rpn_conv 각 cell 위치에서 9개의 anchor에 대한 x, y, w, h pred가 학습된다.
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(12)
					->name("rpn_bbox_pred")
					->filterDim(1, 1, 256, 36, 0, 1)	// 4 * 9(anchors)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->activationType(Activation<Dtype>::NoActivation)
					->inputs({"rpn/output"})
					->propDown({false})
					->outputs({"rpn_bbox_pred"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(13)
					->name("rpn_cls_score_reshape")
					->shape({0, 2, -1, 0})
					->inputs({"rpn_cls_score"})
					->propDown({false})
					->outputs({"rpn_cls_score_reshape"}))


					/*
			// 실제 input data에 대한 cls score, bbox pred를 계산, loss를 계산할 때 쓸 데이터를 생성한다.
			// cls score target, bbox pred target 값
			->layer((new typename AnchorTargetLayer<Dtype>::Builder())
					->id(14)
					->name("rpn-data")
					->featStride(16)
					->inputs({"rpn_cls_score", "gt_boxes", "im_info", "data"})
					->propDown({false, false, false, false})
					->outputs({"rpn_labels", "rpn_bbox_targets", "rpn_bbox_inside_weights", "rpn_bbox_outside_weights"}))
			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(15)
					->name("rpn_loss_cls")
					->propDown({true, false})
					->lossWeight(1.0f)
					->ignoreLabel(-1)
					->normalize(true)
					->softmaxAxis(1)
					->inputs({"rpn_cls_score_reshape", "rpn_labels"})
					->propDown({false, false})
					->outputs({"rpn_cls_loss"}))
			->layer((new typename SmoothL1LossLayer<Dtype>::Builder())
					->id(16)
					->name("rpn_loss_bbox")
					->lossWeight(1.0f)
					->sigma(3.0f)
					->inputs({"rpn_bbox_pred", "rpn_bbox_targets", "rpn_bbox_inside_weights", "rpn_bbox_outside_weights"})
					->propDown({false, false, false, false})
					->outputs({"rpn_loss_bbox"}))
					*/









			//===RoI Proposal===
			// cls score로 softmax
			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(17)
					->name("rpn_cls_prob")
					->softmaxAxis(1)
					->inputs({"rpn_cls_score_reshape"})
					->propDown({false})
					->outputs({"rpn_cls_prob"}))
			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(18)
					->name("rpn_cls_prob_reshape")
					->shape({0, 18, -1, 0})
					->inputs({"rpn_cls_prob"})
					->propDown({false})
					->outputs({"rpn_cls_prob_reshape"}))
			//
			->layer((new typename ProposalLayer<Dtype>::Builder())
					->id(19)
					->name("proposal")
					->featStride(16)
					->inputs({"rpn_cls_prob_reshape", "rpn_bbox_pred", "im_info"})
					->propDown({false, false, false})
					->outputs({"rpn_rois"}))
			->layer((new typename ProposalTargetLayer<Dtype>::Builder())
					->id(20)
					->name("roi-data")
					->numClasses(21)
					->inputs({"rpn_rois", "gt_boxes"})
					->propDown({false, false})
					->outputs({"rois", "labels", "bbox_targets", "bbox_inside_weights", "bbox_outside_weights"}))












			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(21)
					->name("conv1:detect")
					->filterDim(7, 7, 3, 96, 0, 2)
					->weightUpdateParam(0, 0)
					->biasUpdateParam(0, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"conv1_detect"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(22)
					->name("norm1:detect")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv1_detect"})
					->outputs({"norm1_detect"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(23)
					->name("pool1:detect")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm1_detect"})
					->outputs({"pool1_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(24)
					->name("conv2:detect")
					->filterDim(5, 5, 96, 256, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1_detect"})
					->outputs({"conv2_detect"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(25)
					->name("norm2:detect")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv2_detect"})
					->outputs({"norm2_detect"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(26)
					->name("pool2:detect")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm2_detect"})
					->outputs({"pool2_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(27)
					->name("conv3:detect")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2_detect"})
					->outputs({"conv3_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(28)
					->name("conv4:detect")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv3_detect"})
					->outputs({"conv4_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(29)
					->name("conv5:detect")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv4_detect"})
					->outputs({"conv5_detect"}))














			//===RCNN===
			->layer((new typename RoIPoolingLayer<Dtype>::Builder())
					->id(31)
					->name("roi_pool5")
					//->pooledW(6)
					//->pooledH(6)
					->pooledW(5)
					->pooledH(5)
					->spatialScale(0.0625f)
					->inputs({"conv5_detect", "rois"})
					->outputs({"pool5"}))


			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(32)
					->name("pool5_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool5"})
					->outputs({"pool5_reshape"}))



			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(33)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"pool5_reshape"})
					->outputs({"fc6"}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(34)
					->name("fc7")
					->nOut(1024)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"fc6"})
					->outputs({"fc7"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(35)
					->name("cls_score")
					->nOut(21)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Gaussian, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"cls_score"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(36)
					->name("bbox_pred")
					->nOut(21*4)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Gaussian, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"bbox_pred"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(38)
					->name("bbox_pred_reshape")
					->shape({1, 1, -1, 21*4})
					->inputs({"bbox_pred"})
					->outputs({"bbox_pred_reshape"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(39)
					->name("loss_cls")
					->propDown({true, false})
					->lossWeight(1.0f)
					->inputs({"cls_score", "labels"})
					->outputs({"loss_cls"}))

			->layer((new typename SmoothL1LossLayer<Dtype>::Builder())
					->id(30)
					->name("loss_bbox")
					->lossWeight(1.0f)
					->firstAxis(2)
					->inputs({"bbox_pred_reshape", "bbox_targets", "bbox_inside_weights", "bbox_outside_weights"})
					->outputs({"loss_bbox"}))



			->build();



	return layersConfig;
}


template <typename Dtype>
LayersConfig<Dtype>* createFrcnnTestOneShotLayersConfig() {
	//const float rpnWeightLr = 0.0f;
	//const float rpnBiasLr = 0.0f;
	//const float rpnWeightWd = 0.0f;
	//const float rpnBiasWd = 0.0f;

	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())

			->layer((new typename RoITestInputLayer<Dtype>::Builder())
					->id(0)
					->name("input-data")
					->numClasses(21)
					//->pixelMeans({102.9801f, 115.9465f, 122.7717f})	// BGR
					->pixelMeans({0.4815f, 0.4547f, 0.4038f})			// RGB
					->outputs({"data", "im_info"}))


			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1:rpn")
					->filterDim(7, 7, 3, 96, 0, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"conv1_rpn"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(2)
					->name("norm1:rpn")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv1_rpn"})
					->outputs({"norm1_rpn"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("pool1:rpn")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm1_rpn"})
					->outputs({"pool1_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(4)
					->name("conv2:rpn")
					->filterDim(5, 5, 96, 256, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1_rpn"})
					->outputs({"conv2_rpn"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(5)
					->name("norm2:rpn")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv2_rpn"})
					->outputs({"norm2_rpn"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(6)
					->name("pool2:rpn")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm2_rpn"})
					->outputs({"pool2_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(7)
					->name("conv3:rpn")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2_rpn"})
					->outputs({"conv3_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv4:rpn")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv3_rpn"})
					->outputs({"conv4_rpn"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(9)
					->name("conv5:rpn")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv4_rpn"})
					->outputs({"conv5_rpn"}))




			//===RPN===
			// roi-data에서 학습 target 계산,
			// 각 cell별 cls, pred 학습,
			//================================================
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(10)
					->name("rpn_conv/3x3")
					->filterDim(3, 3, 512, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv5_rpn"})
					->outputs({"rpn/output"}))

			// rpn_conv 각 cell 위치에서 9개의 anchor에 대한 fg, bg score가 학습된다.
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("rpn_cls_score")
					->filterDim(1, 1, 256, 18, 0, 1)	// 2(bg/fg) * 9(anchors)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->activationType(Activation<Dtype>::NoActivation)
					->inputs({"rpn/output"})
					->outputs({"rpn_cls_score"}))
			// rpn_conv 각 cell 위치에서 9개의 anchor에 대한 x, y, w, h pred가 학습된다.
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(12)
					->name("rpn_bbox_pred")
					->filterDim(1, 1, 256, 36, 0, 1)	// 4 * 9(anchors)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->activationType(Activation<Dtype>::NoActivation)
					->inputs({"rpn/output"})
					->outputs({"rpn_bbox_pred"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(13)
					->name("rpn_cls_score_reshape")
					->shape({0, 2, -1, 0})
					->inputs({"rpn_cls_score"})
					->outputs({"rpn_cls_score_reshape"}))



			//===RoI Proposal===
			// cls score로 softmax
			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(17)
					->name("rpn_cls_prob")
					->softmaxAxis(1)
					->inputs({"rpn_cls_score_reshape"})
					->outputs({"rpn_cls_prob"}))
			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(18)
					->name("rpn_cls_prob_reshape")
					->shape({0, 18, -1, 0})
					->inputs({"rpn_cls_prob"})
					->outputs({"rpn_cls_prob_reshape"}))
			//
			->layer((new typename ProposalLayer<Dtype>::Builder())
					->id(19)
					->name("proposal")
					->featStride(16)
					->inputs({"rpn_cls_prob_reshape", "rpn_bbox_pred", "im_info"})
					->outputs({"rois"}))












			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(21)
					->name("conv1:detect")
					->filterDim(7, 7, 3, 96, 0, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"conv1_detect"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(22)
					->name("norm1:detect")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv1_detect"})
					->outputs({"norm1_detect"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(23)
					->name("pool1:detect")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm1_detect"})
					->outputs({"pool1_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(24)
					->name("conv2:detect")
					->filterDim(5, 5, 96, 256, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1_detect"})
					->outputs({"conv2_detect"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(25)
					->name("norm2:detect")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv2_detect"})
					->outputs({"norm2_detect"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(26)
					->name("pool2:detect")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm2_detect"})
					->outputs({"pool2_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(27)
					->name("conv3:detect")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2_detect"})
					->outputs({"conv3_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(28)
					->name("conv4:detect")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv3_detect"})
					->outputs({"conv4_detect"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(29)
					->name("conv5:detect")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv4_detect"})
					->outputs({"conv5_detect"}))














			//===RCNN===
			->layer((new typename RoIPoolingLayer<Dtype>::Builder())
					->id(31)
					->name("roi_pool5")
					//->pooledW(6)
					//->pooledH(6)
					->pooledW(5)
					->pooledH(5)
					->spatialScale(0.0625f)
					->inputs({"conv5_detect", "rois"})
					->outputs({"pool5"}))


			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(32)
					->name("pool5_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool5"})
					->outputs({"pool5_reshape"}))



			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(33)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"pool5_reshape"})
					->outputs({"fc6"}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(34)
					->name("fc7")
					->nOut(1024)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"fc6"})
					->outputs({"fc7"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(35)
					->name("cls_score")
					->nOut(21)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Gaussian, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"cls_score"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(36)
					->name("bbox_pred")
					->nOut(21*4)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 1)
					->weightFiller(ParamFillerType::Gaussian, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"bbox_pred"}))


			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(37)
					->name("cls_prob")
					//->softmaxAxis(1)
					->inputs({"cls_score"})
					->outputs({"cls_prob"}))


			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(38)
					->name("bbox_pred_reshape")
					->shape({1, 1, -1, 21*4})
					->inputs({"bbox_pred"})
					->outputs({"bbox_pred_reshape"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(39)
					->name("cls_prob_reshape")
					->shape({1, 1, -1, 21})
					->inputs({"cls_prob"})
					->outputs({"cls_prob_reshape"}))

			->layer((new typename FrcnnTestOutputLayer<Dtype>::Builder())
					->id(40)
					->name("test_output")
					//->maxPerImage(5)
					->thresh(0.5)
					->inputs({"rois", "im_info", "cls_prob_reshape", "bbox_pred_reshape"}))




			->build();



	return layersConfig;
}


template <typename Dtype>
LayersConfig<Dtype>* createFrcnnTestLayersConfig() {
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename RoITestInputLayer<Dtype>::Builder())
					->id(0)
					->name("input-data")
					->numClasses(21)
					//->pixelMeans({102.9801f, 115.9465f, 122.7717f})	// BGR
					->pixelMeans({0.4815f, 0.4547f, 0.4038f})			// RGB
					->outputs({"data", "im_info"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1")
					->filterDim(7, 7, 3, 96, 0, 2)
					->weightUpdateParam(0, 0)
					->biasUpdateParam(0, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"conv1"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(2)
					->name("norm1")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv1"})
					->outputs({"norm1"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("pool1")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm1"})
					->outputs({"pool1"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(4)
					->name("conv2")
					->filterDim(5, 5, 96, 256, 1, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1"})
					->outputs({"conv2"}))
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(5)
					->name("norm2")
					->lrnDim(5, 0.0005, 0.75, 2.0)
					->inputs({"conv2"})
					->outputs({"norm2"}))
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(6)
					->name("pool2")
					->poolDim(3, 3, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"norm2"})
					->outputs({"pool2"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(7)
					->name("conv3")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2"})
					->outputs({"conv3"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv3"})
					->outputs({"conv4"}))
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(9)
					->name("conv5")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv4"})
					->outputs({"conv5"}))

			//===RPN===
			// roi-data에서 학습 target 계산,
			// 각 cell별 cls, pred 학습,
			//================================================
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(10)
					->name("rpn_conv/3x3")
					->filterDim(3, 3, 512, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv5"})
					->outputs({"rpn/output"}))

			// rpn_conv 각 cell 위치에서 9개의 anchor에 대한 fg, bg score가 학습된다.
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("rpn_cls_score")
					->filterDim(1, 1, 256, 18, 0, 1)	// 2(bg/fg) * 9(anchors)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->activationType(Activation<Dtype>::NoActivation)
					->inputs({"rpn/output"})
					->outputs({"rpn_cls_score"}))
			// rpn_conv 각 cell 위치에서 9개의 anchor에 대한 x, y, w, h pred가 학습된다.
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(12)
					->name("rpn_bbox_pred")
					->filterDim(1, 1, 256, 36, 0, 1)	// 4 * 9(anchors)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.01)
					->biasFiller(ParamFillerType::Constant, 0.2)
					->activationType(Activation<Dtype>::NoActivation)
					->inputs({"rpn/output"})
					->outputs({"rpn_bbox_pred"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(13)
					->name("rpn_cls_score_reshape")
					->shape({0, 2, -1, 0})
					->inputs({"rpn_cls_score"})
					->outputs({"rpn_cls_score_reshape"}))


			//===RoI Proposal===
			// cls score로 softmax
			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(17)
					->name("rpn_cls_prob")
					->softmaxAxis(1)
					->inputs({"rpn_cls_score_reshape"})
					->outputs({"rpn_cls_prob"}))
			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(18)
					->name("rpn_cls_prob_reshape")
					->shape({0, 18, -1, 0})
					->inputs({"rpn_cls_prob"})
					->outputs({"rpn_cls_prob_reshape"}))
			//
			->layer((new typename ProposalLayer<Dtype>::Builder())
					->id(19)
					->name("proposal")
					->featStride(16)
					->inputs({"rpn_cls_prob_reshape", "rpn_bbox_pred", "im_info"})
					->outputs({"rois"}))

			//===RCNN===
			->layer((new typename RoIPoolingLayer<Dtype>::Builder())
					->id(21)
					->name("roi_pool5")
					//->pooledW(6)
					//->pooledH(6)
					->pooledW(5)
					->pooledH(5)
					->spatialScale(0.0625f)
					->inputs({"conv5", "rois"})
					->outputs({"pool5"}))

			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(22)
					->name("pool5_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool5"})
					->outputs({"pool5_reshape"}))



			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(23)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"pool5_reshape"})
					->outputs({"fc6"}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(24)
					->name("fc7")
					->nOut(1024)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->activationType(Activation<Dtype>::Type::ReLU)
					->inputs({"fc6"})
					->outputs({"fc7"}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(25)
					->name("cls_score")
					->nOut(21)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Gaussian, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"cls_score"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(26)
					->name("bbox_pred")
					->nOut(21*4)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Gaussian, 0.0)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->activationType(Activation<Dtype>::Type::NoActivation)
					->inputs({"fc7"})
					->outputs({"bbox_pred"}))

			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(27)
					->name("cls_prob")
					//->softmaxAxis(1)
					->inputs({"cls_score"})
					->outputs({"cls_prob"}))


			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(28)
					->name("bbox_pred_reshape")
					->shape({1, 1, -1, 21*4})
					->inputs({"bbox_pred"})
					->outputs({"bbox_pred_reshape"}))


			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(29)
					->name("cls_prob_reshape")
					->shape({1, 1, -1, 21})
					->inputs({"cls_prob"})
					->outputs({"cls_prob_reshape"}))

			->layer((new typename FrcnnTestOutputLayer<Dtype>::Builder())
					->id(30)
					->name("test_output")
					//->maxPerImage(5)
					->thresh(0.7)
					->inputs({"rois", "im_info", "cls_prob_reshape", "bbox_pred_reshape"}))

			->build();


	return layersConfig;
}

template <typename Dtype>
LayersConfig<Dtype>* createGoogLeNetInception5BLayersConfig() {
	const float bias_const = 0.1;

    std::cout << std::endl;
	LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("input")
					->outputs({"data", "label"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1/7x7_s2")
					->filterDim(7, 7, 3, 64, 3, 2)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"data"})
					->outputs({"conv1/7x7_s2"})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(2)
					->name("pool1/3x3_s2")
					->poolDim(3, 3, 1, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv1/7x7_s2"})
					->outputs({"pool1/3x3_s2"})
					)
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(3)
					->name("pool1/norm1")
					->lrnDim(5, 0.0001, 0.75, 2.0)
					->inputs({"pool1/3x3_s2"})
					->outputs({"pool1/norm1"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(4)
					->name("conv2/3x3_reduce")
					->filterDim(1, 1, 64, 64, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool1/norm1"})
					->outputs({"conv2/3x3_reduce"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(5)
					->name("conv2/3x3")
					->filterDim(3, 3, 64, 192, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"conv2/3x3_reduce"})
					->outputs({"conv2/3x3"})
					)
			->layer((new typename LRNLayer<Dtype>::Builder())
					->id(6)
					->name("conv2/norm2")
					->lrnDim(5, 0.0001, 0.75, 2.0)
					->inputs({"conv2/3x3"})
					->outputs({"conv2/norm2"})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(7)
					->name("pool2/3x3_s2")
					->poolDim(3, 3, 1, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv2/norm2"})
					->outputs({"pool2/3x3_s2"})
					)
					/*
			->layer((new typename SplitLayer<Dtype>::Builder())
					->id()
					->name("split2")
					->inputs({"pool2/3x3_s2"})
					->outputs({"pool2/3x3_s2_0", "pool2/3x3_s2_1", "pool2/3x3_s2_2", "pool2/3x3_s2_3"})
					)
					*/
			//INCEPTION 3A
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("inception_3a/1x1")
					->filterDim(1, 1, 192, 64, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/1x1"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(9)
					->name("inception_3a/3x3_reduce")
					->filterDim(1, 1, 192, 96, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/3x3_reduce"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(10)
					->name("inception_3a/3x3")
					->filterDim(3, 3, 96, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3a/3x3_reduce"})
					->outputs({"inception_3a/3x3"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("inception_3a/5x5_reduce")
					->filterDim(3, 3, 192, 16, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/5x5_reduce"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(12)
					->name("inception_3a/5x5")
					->filterDim(3, 3, 16, 32, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3a/5x5_reduce"})
					->outputs({"inception_3a/5x5"})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(13)
					->name("inception_3a/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"pool2/3x3_s2"})
					->outputs({"inception_3a/pool"})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(14)
					->name("inception_3a/pool_proj")
					->filterDim(1, 1, 192, 32, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3a/pool"})
					->outputs({"inception_3a/pool_proj"})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(15)
					->name("inception_3a/output")
					->inputs({"inception_3a/1x1", "inception_3a/3x3",
								"inception_3a/5x5", "inception_3a/pool_proj"})
					->outputs({"inception_3a/output"})
					)
			//INCEPTION 3B
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(16)
					->name("inception_3b/1x1")
					->filterDim(1, 1, 256, 128, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3a/output"})
					->outputs({"inception_3b/1x1"})
					//->prevLayerIndices({15})
					//->nextLayerIndices({23})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(17)
					->name("inception_3b/3x3_reduce")
					->filterDim(1, 1, 256, 128, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3a/output"})
					->outputs({"inception_3b/3x3_reduce"})
					//->prevLayerIndices({15})
					//->nextLayerIndices({18})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(18)
					->name("inception_3b/3x3")
					->filterDim(3, 3, 128, 192, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3b/3x3_reduce"})
					->outputs({"inception_3b/3x3"})
					//->prevLayerIndices({17})
					//->nextLayerIndices({23})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(19)
					->name("inception_3b/5x5_reduce")
					->filterDim(3, 3, 256, 32, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3a/output"})
					->outputs({"inception_3b/5x5_reduce"})
					//->prevLayerIndices({15})
					//->nextLayerIndices({20})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(20)
					->name("inception_3b/5x5")
					->filterDim(3, 3, 32, 96, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3b/5x5_reduce"})
					->outputs({"inception_3b/5x5"})
					//->prevLayerIndices({19})
					//->nextLayerIndices({23})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(21)
					->name("inception_3b/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"inception_3a/output"})
					->outputs({"inception_3b/pool"})
					//->prevLayerIndices({15})
					//->nextLayerIndices({22})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(22)
					->name("inception_3b/pool_proj")
					->filterDim(1, 1, 256, 64, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_3b/pool"})
					->outputs({"inception_3b/pool_proj"})
					//->prevLayerIndices({21})
					//->nextLayerIndices({23})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(23)
					->name("inception_3b/output")
					->inputs({"inception_3b/1x1", "inception_3b/3x3",
								"inception_3b/5x5", "inception_3b/pool_proj"})
					->outputs({"inception_3b/output"})
					//->prevLayerIndices({16, 18, 20, 22})
					//->nextLayerIndices({24})
					)


			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(24)
					->name("pool3/3x3_s2")
					->poolDim(3, 3, 1, 2)
					->poolingType(PoolingType::Max)
					->inputs({"inception_3b/output"})
					->outputs({"pool3/3x3_s2"})
					//->prevLayerIndices({23})
					//->nextLayerIndices({25, 26, 28, 30})
					)

			//INCEPTION 4A
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(25)
					->name("inception_4a/1x1")
					->filterDim(1, 1, 480, 192, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool3/3x3_s2"})
					->outputs({"inception_4a/1x1"})
					//->prevLayerIndices({24})
					//->nextLayerIndices({32})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(26)
					->name("inception_4a/3x3_reduce")
					->filterDim(1, 1, 480, 96, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool3/3x3_s2"})
					->outputs({"inception_4a/3x3_reduce"})
					//->prevLayerIndices({24})
					//->nextLayerIndices({27})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(27)
					->name("inception_4a/3x3")
					->filterDim(3, 3, 96, 208, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4a/3x3_reduce"})
					->outputs({"inception_4a/3x3"})
					//->prevLayerIndices({26})
					//->nextLayerIndices({32})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(28)
					->name("inception_4a/5x5_reduce")
					->filterDim(3, 3, 480, 16, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool3/3x3_s2"})
					->outputs({"inception_4a/5x5_reduce"})
					//->prevLayerIndices({24})
					//->nextLayerIndices({29})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(29)
					->name("inception_4a/5x5")
					->filterDim(3, 3, 16, 48, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4a/5x5_reduce"})
					->outputs({"inception_4a/5x5"})
					//->prevLayerIndices({28})
					//->nextLayerIndices({32})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(30)
					->name("inception_4a/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"pool3/3x3_s2"})
					->outputs({"inception_4a/pool"})
					//->prevLayerIndices({24})
					//->nextLayerIndices({31})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(31)
					->name("inception_4a/pool_proj")
					->filterDim(1, 1, 480, 64, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4a/pool"})
					->outputs({"inception_4a/pool_proj"})
					//->prevLayerIndices({30})
					//->nextLayerIndices({32})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(32)
					->name("inception_4a/output")
					->inputs({"inception_4a/1x1", "inception_4a/3x3",
								"inception_4a/5x5", "inception_4a/pool_proj"})
					->outputs({"inception_4a/output"})
					//->prevLayerIndices({25, 27, 29, 31})
					//->nextLayerIndices({33, 34, 36, 38})
					)



			//INCEPTION 4B
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(33)
					->name("inception_4b/1x1")
					->filterDim(1, 1, 512, 160, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4a/output"})
					->outputs({"inception_4b/1x1"})
					//->prevLayerIndices({32})
					//->nextLayerIndices({40})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(34)
					->name("inception_4b/3x3_reduce")
					->filterDim(1, 1, 512, 112, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4a/output"})
					->outputs({"inception_4b/3x3_reduce"})
					//->prevLayerIndices({32})
					//->nextLayerIndices({35})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(35)
					->name("inception_4b/3x3")
					->filterDim(3, 3, 112, 224, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4b/3x3_reduce"})
					->outputs({"inception_4b/3x3"})
					//->prevLayerIndices({34})
					//->nextLayerIndices({40})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(36)
					->name("inception_4b/5x5_reduce")
					->filterDim(3, 3, 512, 24, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4a/output"})
					->outputs({"inception_4b/5x5_reduce"})
					//->prevLayerIndices({32})
					//->nextLayerIndices({37})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(37)
					->name("inception_4b/5x5")
					->filterDim(3, 3, 24, 64, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4b/5x5_reduce"})
					->outputs({"inception_4b/5x5"})
					//->prevLayerIndices({36})
					//->nextLayerIndices({40})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(38)
					->name("inception_4b/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"inception_4a/output"})
					->outputs({"inception_4b/pool"})
					//->prevLayerIndices({32})
					//->nextLayerIndices({39})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(39)
					->name("inception_4b/pool_proj")
					->filterDim(1, 1, 512, 64, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4b/pool"})
					->outputs({"inception_4b/pool_proj"})
					//->prevLayerIndices({38})
					//->nextLayerIndices({40})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(40)
					->name("inception_4b/output")
					->inputs({"inception_4b/1x1", "inception_4b/3x3",
								"inception_4b/5x5", "inception_4b/pool_proj"})
					->outputs({"inception_4b/output"})
					//->prevLayerIndices({33, 35, 37, 39})
					//->nextLayerIndices({41, 42, 44, 46})
					)



			//INCEPTION 4C
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(41)
					->name("inception_4c/1x1")
					->filterDim(1, 1, 512, 128, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4b/output"})
					->outputs({"inception_4c/1x1"})
					//->prevLayerIndices({40})
					//->nextLayerIndices({48})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(42)
					->name("inception_4c/3x3_reduce")
					->filterDim(1, 1, 512, 128, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4b/output"})
					->outputs({"inception_4c/3x3_reduce"})
					//->prevLayerIndices({40})
					//->nextLayerIndices({43})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(43)
					->name("inception_4c/3x3")
					->filterDim(3, 3, 128, 256, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4c/3x3_reduce"})
					->outputs({"inception_4c/3x3"})
					//->prevLayerIndices({42})
					//->nextLayerIndices({48})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(44)
					->name("inception_4c/5x5_reduce")
					->filterDim(3, 3, 512, 24, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4b/output"})
					->outputs({"inception_4c/5x5_reduce"})
					//->prevLayerIndices({40})
					//->nextLayerIndices({45})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(45)
					->name("inception_4c/5x5")
					->filterDim(3, 3, 24, 64, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4c/5x5_reduce"})
					->outputs({"inception_4c/5x5"})
					//->prevLayerIndices({44})
					//->nextLayerIndices({48})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(46)
					->name("inception_4c/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"inception_4b/output"})
					->outputs({"inception_4c/pool"})
					//->prevLayerIndices({40})
					//->nextLayerIndices({47})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(47)
					->name("inception_4c/pool_proj")
					->filterDim(1, 1, 512, 64, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4c/pool"})
					->outputs({"inception_4c/pool_proj"})
					//->prevLayerIndices({46})
					//->nextLayerIndices({48})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(48)
					->name("inception_4c/output")
					->inputs({"inception_4c/1x1", "inception_4c/3x3",
								"inception_4c/5x5", "inception_4c/pool_proj"})
					->outputs({"inception_4c/output"})
					//->prevLayerIndices({41, 43, 45, 47})
					//->nextLayerIndices({49, 50, 52, 54})
					)




			//INCEPTION 4D
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(49)
					->name("inception_4d/1x1")
					->filterDim(1, 1, 512, 112, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4c/output"})
					->outputs({"inception_4d/1x1"})
					//->prevLayerIndices({48})
					//->nextLayerIndices({56})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(50)
					->name("inception_4d/3x3_reduce")
					->filterDim(1, 1, 512, 144, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4c/output"})
					->outputs({"inception_4d/3x3_reduce"})
					//->prevLayerIndices({48})
					//->nextLayerIndices({51})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(51)
					->name("inception_4d/3x3")
					->filterDim(3, 3, 144, 288, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4d/3x3_reduce"})
					->outputs({"inception_4d/3x3"})
					//->prevLayerIndices({50})
					//->nextLayerIndices({56})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(52)
					->name("inception_4d/5x5_reduce")
					->filterDim(3, 3, 512, 32, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4c/output"})
					->outputs({"inception_4d/5x5_reduce"})
					//->prevLayerIndices({48})
					//->nextLayerIndices({53})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(53)
					->name("inception_4d/5x5")
					->filterDim(3, 3, 32, 64, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4d/5x5_reduce"})
					->outputs({"inception_4d/5x5"})
					//->prevLayerIndices({52})
					//->nextLayerIndices({56})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(54)
					->name("inception_4d/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"inception_4c/output"})
					->outputs({"inception_4d/pool"})
					//->prevLayerIndices({48})
					//->nextLayerIndices({55})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(55)
					->name("inception_4d/pool_proj")
					->filterDim(1, 1, 512, 64, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4d/pool"})
					->outputs({"inception_4d/pool_proj"})
					//->prevLayerIndices({54})
					//->nextLayerIndices({56})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(56)
					->name("inception_4d/output")
					->inputs({"inception_4d/1x1", "inception_4d/3x3", "inception_4d/5x5",
                        "inception_4d/pool_proj"})
					->outputs({"inception_4d/output"})
					//->prevLayerIndices({49, 51, 53, 55})
					//->nextLayerIndices({57, 58, 60, 62})
					)

			//INCEPTION 4E
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(57)
					->name("inception_4e/1x1")
					->filterDim(1, 1, 528, 256, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4d/output"})
					->outputs({"inception_4e/1x1"})
					//->prevLayerIndices({56})
					//->nextLayerIndices({64})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(58)
					->name("inception_4e/3x3_reduce")
					->filterDim(1, 1, 528, 160, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4d/output"})
					->outputs({"inception_4e/3x3_reduce"})
					//->prevLayerIndices({56})
					//->nextLayerIndices({59})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(59)
					->name("inception_4e/3x3")
					->filterDim(3, 3, 160, 320, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4e/3x3_reduce"})
					->outputs({"inception_4e/3x3"})
					//->prevLayerIndices({58})
					//->nextLayerIndices({64})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(60)
					->name("inception_4e/5x5_reduce")
					->filterDim(3, 3, 528, 32, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4d/output"})
					->outputs({"inception_4e/5x5_reduce"})
					//->prevLayerIndices({56})
					//->nextLayerIndices({61})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(61)
					->name("inception_4e/5x5")
					->filterDim(3, 3, 32, 128, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4e/5x5_reduce"})
					->outputs({"inception_4e/5x5"})
					//->prevLayerIndices({60})
					//->nextLayerIndices({64})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(62)
					->name("inception_4e/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"inception_4d/output"})
					->outputs({"inception_4e/pool"})
					//->prevLayerIndices({56})
					//->nextLayerIndices({63})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(63)
					->name("inception_4e/pool_proj")
					->filterDim(1, 1, 528, 128, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_4e/pool"})
					->outputs({"inception_4e/pool_proj"})
					//->prevLayerIndices({62})
					//->nextLayerIndices({64})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(64)
					->name("inception_4e/output")
					->inputs({"inception_4e/1x1", "inception_4e/3x3",
								"inception_4e/5x5", "inception_4e/pool_proj"})
					->outputs({"inception_4e/output"})
					//->prevLayerIndices({57, 59, 61, 63})
					//->nextLayerIndices({65})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(65)
					->name("pool4/3x3_s2")
					->poolDim(3, 3, 1, 2)
					->poolingType(PoolingType::Max)
					->inputs({"inception_4e/output"})
					->outputs({"pool4/3x3_s2"})
					//->prevLayerIndices({64})
					//->nextLayerIndices({66, 67, 69, 71})
					)

			//INCEPTION 5A
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(66)
					->name("inception_5a/1x1")
					->filterDim(1, 1, 832, 256, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool4/3x3_s2"})
					->outputs({"inception_5a/1x1"})
					//->prevLayerIndices({65})
					//->nextLayerIndices({73})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(67)
					->name("inception_5a/3x3_reduce")
					->filterDim(1, 1, 832, 160, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool4/3x3_s2"})
					->outputs({"inception_5a/3x3_reduce"})
					//->prevLayerIndices({65})
					//->nextLayerIndices({68})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(68)
					->name("inception_5a/3x3")
					->filterDim(3, 3, 160, 320, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5a/3x3_reduce"})
					->outputs({"inception_5a/3x3"})
					//->prevLayerIndices({67})
					//->nextLayerIndices({73})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(69)
					->name("inception_5a/5x5_reduce")
					->filterDim(3, 3, 832, 32, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"pool4/3x3_s2"})
					->outputs({"inception_5a/5x5_reduce"})
					//->prevLayerIndices({65})
					//->nextLayerIndices({70})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(70)
					->name("inception_5a/5x5")
					->filterDim(3, 3, 32, 128, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5a/5x5_reduce"})
					->outputs({"inception_5a/5x5"})
					//->prevLayerIndices({69})
					//->nextLayerIndices({73})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(71)
					->name("inception_5a/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"pool4/3x3_s2"})
					->outputs({"inception_5a/pool"})
					//->prevLayerIndices({65})
					//->nextLayerIndices({72})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(72)
					->name("inception_5a/pool_proj")
					->filterDim(1, 1, 832, 128, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5a/pool"})
					->outputs({"inception_5a/pool_proj"})
					//->prevLayerIndices({71})
					//->nextLayerIndices({73})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(73)
					->name("inception_5a/output")
					->inputs({"inception_5a/1x1", "inception_5a/3x3",
								"inception_5a/5x5", "inception_5a/pool_proj"})
					->outputs({"inception_5a/output"})
					//->prevLayerIndices({66, 68, 70, 72})
					//->nextLayerIndices({74, 75, 77, 79})
					)



			//INCEPTION 5B
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(74)
					->name("inception_5b/1x1")
					->filterDim(1, 1, 832, 384, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5a/output"})
					->outputs({"inception_5b/1x1"})
					//->prevLayerIndices({73})
					//->nextLayerIndices({81})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(75)
					->name("inception_5b/3x3_reduce")
					->filterDim(1, 1, 832, 192, 0, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.09)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5a/output"})
					->outputs({"inception_5b/3x3_reduce"})
					//->prevLayerIndices({73})
					//->nextLayerIndices({76})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(76)
					->name("inception_5b/3x3")
					->filterDim(3, 3, 192, 384, 1, 1)
					//->filterDim(3, 3, 96, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.03)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5b/3x3_reduce"})
					->outputs({"inception_5b/3x3"})
					//->prevLayerIndices({75})
					//->nextLayerIndices({81})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(77)
					->name("inception_5b/5x5_reduce")
					->filterDim(3, 3, 832, 48, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5a/output"})
					->outputs({"inception_5b/5x5_reduce"})
					//->prevLayerIndices({73})
					//->nextLayerIndices({78})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(78)
					->name("inception_5b/5x5")
					->filterDim(3, 3, 48, 128, 1, 1)
					//->filterDim(3, 3, 16, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5b/5x5_reduce"})
					->outputs({"inception_5b/5x5"})
					//->prevLayerIndices({77})
					//->nextLayerIndices({81})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(79)
					->name("inception_5b/pool")
					->poolDim(3, 3, 1, 1)
					->poolingType(PoolingType::Max)
					->inputs({"inception_5a/output"})
					->outputs({"inception_5b/pool"})
					//->prevLayerIndices({73})
					//->nextLayerIndices({80})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(80)
					->name("inception_5b/pool_proj")
					->filterDim(1, 1, 832, 128, 0, 1)
					//->filterDim(3, 3, 192, 64, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					->inputs({"inception_5b/pool"})
					->outputs({"inception_5b/pool_proj"})
					//->prevLayerIndices({79})
					//->nextLayerIndices({81})
					)
			->layer((new typename DepthConcatLayer<Dtype>::Builder())
					->id(81)
					->name("inception_5b/output")
					->inputs({"inception_5b/1x1", "inception_5b/3x3",
								"inception_5b/5x5", "inception_5b/pool_proj"})
					->outputs({"inception_5b/output"})
					//->prevLayerIndices({74, 76, 78, 80})
					//->nextLayerIndices({82})
					)


			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(82)
					->name("pool5/7x7_s1")
					->poolDim(7, 7, 3, 0, 4)
					->poolingType(PoolingType::Avg)
					->inputs({"inception_5b/output"})
					->outputs({"pool5/7x7_s1"})
					//->prevLayerIndices({81})
					//->nextLayerIndices({83})
					)
					/*
			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(83)
					->name("softmax")
					->nOut(1000)
					->pDropout(0.4)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, 0.0)
					->inputs({"pool5/7x7_s1", "label"})
					->outputs({"prob"})
					//->prevLayerIndices({82})
					)
					*/
			->build();

	return layersConfig;
}


#define ILSVRC_1000 0

template <typename Dtype>
LayersConfig<Dtype>* createVGG19NetLayersConfig() {
	const float bias_const = 0.2f;

	LayersConfig<Dtype>* layersConfig = (new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("data")
#if ILSVRC_1000
					->source(std::string(SPARAM(BASE_DATA_DIR))
						+ std::string("/ILSVRC2012/save/1000"))
					->sourceType("ImagePack")
					->numTrainPack(1)
#else
					->source(std::string(SPARAM(BASE_DATA_DIR))
						+ std::string("/ILSVRC2012/save/10000"))
					->sourceType("ImagePack")
					->numTrainPack(40)
#endif
					->numTestPack(1)
					//->mean({0.47684615850, 0.45469805598, 0.41394191980})
					->mean({123.0f, 117.0f, 104.0f})
					->outputs({"data", "label"}))

			// artistic style에서 사용할 input layer 설정
							/*
			->layer((new typename DummyInputLayer<Dtype>::Builder())
					->id(0)
					->name("data")
					->outputs({"data", "label"}))
					*/

			// tier 1
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1_1")
					->filterDim(3, 3, 3, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"data"})
					->outputs({"conv1_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(2)
					->name("relu1_1")
					->inputs({"conv1_1"})
					->outputs({"conv1_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("conv1_2")
					->filterDim(3, 3, 64, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv1_1"})
					->outputs({"conv1_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(4)
					->name("relu1_2")
					->inputs({"conv1_2"})
					->outputs({"conv1_2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(5)
					->name("pool1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv1_2"})
					->outputs({"pool1"}))

			// tier 2
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(6)
					->name("conv2_1")
					->filterDim(3, 3, 64, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool1"})
					->outputs({"conv2_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(7)
					->name("relu2_1")
					->inputs({"conv2_1"})
					->outputs({"conv2_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv2_2")
					->filterDim(3, 3, 128, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv2_1"})
					->outputs({"conv2_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(9)
					->name("relu2_2")
					->inputs({"conv2_2"})
					->outputs({"conv2_2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(10)
					->name("pool2")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv2_2"})
					->outputs({"pool2"}))

			// tier 3
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("conv3_1")
					->filterDim(3, 3, 128, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool2"})
					->outputs({"conv3_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(12)
					->name("relu3_1")
					->inputs({"conv3_1"})
					->outputs({"conv3_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(13)
					->name("conv3_2")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv3_1"})
					->outputs({"conv3_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(14)
					->name("relu3_2")
					->inputs({"conv3_2"})
					->outputs({"conv3_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(15)
					->name("conv3_3")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv3_2"})
					->outputs({"conv3_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(16)
					->name("relu3_3")
					->inputs({"conv3_3"})
					->outputs({"conv3_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(17)
					->name("conv3_4")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv3_3"})
					->outputs({"conv3_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(18)
					->name("relu3_4")
					->inputs({"conv3_4"})
					->outputs({"conv3_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(19)
					->name("pool3")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv3_4"})
					->outputs({"pool3"}))

			// tier 4
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(20)
					->name("conv4_1")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool3"})
					->outputs({"conv4_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(21)
					->name("relu4_1")
					->inputs({"conv4_1"})
					->outputs({"conv4_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(22)
					->name("conv4_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv4_1"})
					->outputs({"conv4_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(23)
					->name("relu4_2")
					->inputs({"conv4_2"})
					->outputs({"conv4_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(24)
					->name("conv4_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv4_2"})
					->outputs({"conv4_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(25)
					->name("relu4_3")
					->inputs({"conv4_3"})
					->outputs({"conv4_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(26)
					->name("conv4_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv4_3"})
					->outputs({"conv4_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(27)
					->name("relu4_4")
					->inputs({"conv4_4"})
					->outputs({"conv4_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(28)
					->name("pool4")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv4_4"})
					->outputs({"pool4"}))

			// tier 5
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(29)
					->name("conv5_1")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool4"})
					->outputs({"conv5_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(30)
					->name("relu5_1")
					->inputs({"conv5_1"})
					->outputs({"conv5_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(31)
					->name("conv5_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv5_1"})
					->outputs({"conv5_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(32)
					->name("relu5_2")
					->inputs({"conv5_2"})
					->outputs({"conv5_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(33)
					->name("conv5_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv5_2"})
					->outputs({"conv5_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(34)
					->name("relu5_3")
					->inputs({"conv5_3"})
					->outputs({"conv5_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(35)
					->name("conv5_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv5_3"})
					->outputs({"conv5_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(36)
					->name("relu5_4")
					->inputs({"conv5_4"})
					->outputs({"conv5_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(37)
					->name("pool5")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Max)
					->inputs({"conv5_4"})
					->outputs({"pool5"}))


			// classifier
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(39)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool5"})
					->outputs({"fc6"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(40)
					->name("relu6")
					->inputs({"fc6"})
					->outputs({"fc6"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(41)
					->name("fc7")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"fc6"})
					->outputs({"fc7"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(42)
					->name("relu7")
					->inputs({"fc7"})
					->outputs({"fc7"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(43)
					->name("fc8")
					->nOut(1000)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Gaussian, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"fc7"})
					->outputs({"fc8"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(44)
					->name("loss")
					->inputs({"fc8", "label"})
					->outputs({"loss"}))

			->build();

	return layersConfig;
}


#define RELU 1

template <typename Dtype>
LayersConfig<Dtype>* createVGG19NetArtisticLayersConfig() {
	const float bias_const = 0.2f;

	LayersConfig<Dtype>* layersConfig = (new typename LayersConfig<Dtype>::Builder())
			->layer((new typename DummyInputLayer<Dtype>::Builder())
					->id(0)
					->name("data")
					->outputs({"data", "label"}))
			// tier 1
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1_1")
					->filterDim(3, 3, 3, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"data"})
					->outputs({"conv1_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(2)
					->name("relu1_1")
					->inputs({"conv1_1"})
					->outputs({"conv1_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("conv1_2")
					->filterDim(3, 3, 64, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv1_1"})
					->outputs({"conv1_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(4)
					->name("relu1_2")
					->inputs({"conv1_2"})
					->outputs({"conv1_2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(5)
					->name("pool1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
#if RELU
					->inputs({"relu1_2"})
#else
					->inputs({"conv1_2"})
#endif
					->outputs({"pool1"}))

			// tier 2
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(6)
					->name("conv2_1")
					->filterDim(3, 3, 64, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool1"})
					->outputs({"conv2_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(7)
					->name("relu2_1")
					->inputs({"conv2_1"})
					->outputs({"conv2_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv2_2")
					->filterDim(3, 3, 128, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv2_1"})
					->outputs({"conv2_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(9)
					->name("relu2_2")
					->inputs({"conv2_2"})
					->outputs({"conv2_2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(10)
					->name("pool2")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
#if RELU
					->inputs({"relu2_2"})
#else
					->inputs({"conv2_2"})
#endif
					->outputs({"pool2"}))

			// tier 3
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("conv3_1")
					->filterDim(3, 3, 128, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool2"})
					->outputs({"conv3_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(12)
					->name("relu3_1")
					->inputs({"conv3_1"})
					->outputs({"conv3_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(13)
					->name("conv3_2")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv3_1"})
					->outputs({"conv3_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(14)
					->name("relu3_2")
					->inputs({"conv3_2"})
					->outputs({"conv3_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(15)
					->name("conv3_3")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv3_2"})
					->outputs({"conv3_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(16)
					->name("relu3_3")
					->inputs({"conv3_3"})
					->outputs({"conv3_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(17)
					->name("conv3_4")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv3_3"})
					->outputs({"conv3_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(18)
					->name("relu3_4")
					->inputs({"conv3_4"})
					->outputs({"conv3_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(19)
					->name("pool3")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
#if RELU
					->inputs({"relu3_4"})
#else
					->inputs({"conv3_4"})
#endif
					->outputs({"pool3"}))

			// tier 4
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(20)
					->name("conv4_1")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool3"})
					->outputs({"conv4_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(21)
					->name("relu4_1")
					->inputs({"conv4_1"})
					->outputs({"conv4_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(22)
					->name("conv4_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv4_1"})
					->outputs({"conv4_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(23)
					->name("relu4_2")
					->inputs({"conv4_2"})
					->outputs({"conv4_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(24)
					->name("conv4_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv4_2"})
					->outputs({"conv4_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(25)
					->name("relu4_3")
					->inputs({"conv4_3"})
					->outputs({"conv4_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(26)
					->name("conv4_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv4_3"})
					->outputs({"conv4_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(27)
					->name("relu4_4")
					->inputs({"conv4_4"})
					->outputs({"conv4_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(28)
					->name("pool4")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu4_4"})
					->outputs({"pool4"}))

			// tier 5
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(29)
					->name("conv5_1")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool4"})
					->outputs({"conv5_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(30)
					->name("relu5_1")
					->inputs({"conv5_1"})
					->outputs({"conv5_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(31)
					->name("conv5_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv5_1"})
					->outputs({"conv5_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(32)
					->name("relu5_2")
					->inputs({"conv5_2"})
					->outputs({"conv5_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(33)
					->name("conv5_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv5_2"})
					->outputs({"conv5_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(34)
					->name("relu5_3")
					->inputs({"conv5_3"})
					->outputs({"conv5_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(35)
					->name("conv5_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"conv5_3"})
					->outputs({"conv5_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(36)
					->name("relu5_4")
					->inputs({"conv5_4"})
					->outputs({"conv5_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(37)
					->name("pool5")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu5_4"})
					->outputs({"pool5"}))

/*
			// classifier
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(39)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool5"})
					->outputs({"fc6"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(40)
					->name("relu6")
					->inputs({"fc6"})
					->outputs({"fc6"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(41)
					->name("fc7")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"fc6"})
					->outputs({"fc7"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(42)
					->name("relu7")
					->inputs({"fc7"})
					->outputs({"fc7"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(43)
					->name("fc8")
					->nOut(1000)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Gaussian, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"fc7"})
					->outputs({"fc8"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(44)
					->name("loss")
					->inputs({"fc8", "label"})
					->outputs({"loss"}))
					*/

			->build();

	return layersConfig;
}


template <typename Dtype>
LayersConfig<Dtype>* createVGG19NetArtisticTestLayersConfig() {
	const float bias_const = 0.1f;

	LayersConfig<Dtype>* layersConfig = (new typename LayersConfig<Dtype>::Builder())
			->layer((new typename DummyInputLayer<Dtype>::Builder())
					->id(0)
					->name("data")
					->outputs({"data"}))

			// tier 1
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1_1")
					->filterDim(3, 3, 3, 3, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"data"})
					->outputs({"conv1_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(2)
					->name("relu1_1")
					->inputs({"conv1_1"})
					->outputs({"relu1_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(3)
					->name("conv1_2")
					->filterDim(3, 3, 3, 3, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"relu1_1"})
					->outputs({"conv1_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(4)
					->name("relu1_2")
					->inputs({"conv1_2"})
					->outputs({"relu1_2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(5)
					->name("pool1")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu1_2"})
					->outputs({"pool1"}))

			// tier 2
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(6)
					->name("conv2_1")
					->filterDim(3, 3, 3, 5, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool1"})
					->outputs({"conv2_1"}))
					/*
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(7)
					->name("relu2_1")
					->inputs({"conv2_1"})
					->outputs({"relu2_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv2_2")
					->filterDim(3, 3, 128, 128, 1, 1)
					->inputs({"relu2_1"})
					->outputs({"conv2_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(9)
					->name("relu2_2")
					->inputs({"conv2_2"})
					->outputs({"relu2_2"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(10)
					->name("pool2")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu2_2"})
					->outputs({"pool2"}))

			// tier 3
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(11)
					->name("conv3_1")
					->filterDim(3, 3, 128, 256, 1, 1)
					->inputs({"pool2"})
					->outputs({"conv3_1"}))
					*/
					/*
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(12)
					->name("relu3_1")
					->inputs({"conv3_1"})
					->outputs({"relu3_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(13)
					->name("conv3_2")
					->filterDim(3, 3, 256, 256, 1, 1)
					->inputs({"relu3_1"})
					->outputs({"conv3_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(14)
					->name("relu3_2")
					->inputs({"conv3_2"})
					->outputs({"relu3_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(15)
					->name("conv3_3")
					->filterDim(3, 3, 256, 256, 1, 1)
					->inputs({"relu3_2"})
					->outputs({"conv3_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(16)
					->name("relu3_3")
					->inputs({"conv3_3"})
					->outputs({"relu3_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(17)
					->name("conv3_4")
					->filterDim(3, 3, 256, 256, 1, 1)
					->inputs({"relu3_3"})
					->outputs({"conv3_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(18)
					->name("relu3_4")
					->inputs({"conv3_4"})
					->outputs({"relu3_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(19)
					->name("pool3")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu3_4"})
					->outputs({"pool3"}))

			// tier 4
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(20)
					->name("conv4_1")
					->filterDim(3, 3, 256, 512, 1, 1)
					->inputs({"pool3"})
					->outputs({"conv4_1"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(21)
					->name("relu4_1")
					->inputs({"conv4_1"})
					->outputs({"relu4_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(22)
					->name("conv4_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->inputs({"relu4_1"})
					->outputs({"conv4_2"}))
					*/

					/*
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(23)
					->name("relu4_2")
					->inputs({"conv4_2"})
					->outputs({"relu4_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(24)
					->name("conv4_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->inputs({"relu4_2"})
					->outputs({"conv4_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(25)
					->name("relu4_3")
					->inputs({"conv4_3"})
					->outputs({"relu4_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(26)
					->name("conv4_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->inputs({"relu4_3"})
					->outputs({"conv4_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(27)
					->name("relu4_4")
					->inputs({"conv4_4"})
					->outputs({"relu4_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(28)
					->name("pool4")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu4_4"})
					->outputs({"pool4"}))

			// tier 5
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(29)
					->name("conv5_1")
					->filterDim(3, 3, 512, 512, 1, 1)
					->inputs({"pool4"})
					->outputs({"conv5_1"}))
					*/
					/*
					// NOT USED LAYERS IN TEST
			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(30)
					->name("relu5_1")
					->inputs({"conv5_1"})
					->outputs({"relu5_1"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(31)
					->name("conv5_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"relu5_1"})
					->outputs({"conv5_2"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(32)
					->name("relu5_2")
					->inputs({"conv5_2"})
					->outputs({"relu5_2"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(33)
					->name("conv5_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"relu5_2"})
					->outputs({"conv5_3"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(34)
					->name("relu5_3")
					->inputs({"conv5_3"})
					->outputs({"relu5_3"}))

			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(35)
					->name("conv5_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"relu5_3"})
					->outputs({"conv5_4"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(36)
					->name("relu5_4")
					->inputs({"conv5_4"})
					->outputs({"relu5_4"}))

			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(37)
					->name("pool5")
					->poolDim(2, 2, 0, 2)
					->poolingType(PoolingType::Avg)
					->inputs({"relu5_4"})
					->outputs({"pool5"}))

			// classifier
			->layer((new typename ReshapeLayer<Dtype>::Builder())
					->id(38)
					->name("pool5_reshape")
					->shape({0, 1, -1, 1})
					->inputs({"pool5"})
					->outputs({"pool5_reshape"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(39)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"pool5_reshape"})
					->outputs({"fc6"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(40)
					->name("relu6")
					->inputs({"fc6"})
					->outputs({"relu6"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(41)
					->name("fc7")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"relu6"})
					->outputs({"fc7"}))

			->layer((new typename ReluLayer<Dtype>::Builder())
					->id(42)
					->name("relu7")
					->inputs({"fc7"})
					->outputs({"relu7"}))

			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(43)
					->name("fc8")
					->nOut(1000)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Gaussian, 0.1)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->inputs({"relu7"})
					->outputs({"fc8"}))

			->layer((new typename SoftmaxWithLossLayer<Dtype>::Builder())
					->id(44)
					->name("prob")
					->inputs({"fc8", "label"})
					->outputs({"prob"}))
					*/

			->build();

	return layersConfig;
}


/*
template <typename Dtype>
LayersConfig<Dtype>* createVGG19NetLayersArtisticConfig() {
	const float weight_const = 0.01f;
		const float bias_const = 0.1f;
		const uint32_t poolKernel = 2;

        std::cout << std::endl;
		LayersConfig<Dtype>* layersConfig =
			(new typename LayersConfig<Dtype>::Builder())
			->layer((new typename InputLayer<Dtype>::Builder())
					->id(0)
					->name("input")
					//->nextLayerIndices({1})
					)

			// 1
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(1)
					->name("conv1_1")
					->filterDim(3, 3, 3, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({0})
					//->nextLayerIndices({2})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(2)
					->name("conv1_2")
					->filterDim(3, 3, 64, 64, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({1})
					//->nextLayerIndices({3})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(3)
					->name("pool1")
					->poolDim(poolKernel, poolKernel, (poolKernel-1)/2, 2)
					->poolingType(PoolingType::Avg)
					//->prevLayerIndices({2})
					//->nextLayerIndices({4})
					)

			// 2
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(4)
					->name("conv2_1")
					->filterDim(3, 3, 64, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({3})
					//->nextLayerIndices({5})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(5)
					->name("conv2_2")
					->filterDim(3, 3, 128, 128, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({4})
					//->nextLayerIndices({6})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(6)
					->name("pool2")
					->poolDim(poolKernel, poolKernel, (poolKernel-1)/2, 2)
					->poolingType(PoolingType::Avg)
					//->prevLayerIndices({5})
					//->nextLayerIndices({7})
					)


			// 3
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(7)
					->name("conv3_1")
					->filterDim(3, 3, 128, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({6})
					//->nextLayerIndices({8})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(8)
					->name("conv3_2")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({7})
					//->nextLayerIndices({9})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(9)
					->name("conv3_3")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({8})
					//->nextLayerIndices({10})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(10)
					->name("conv3_4")
					->filterDim(3, 3, 256, 256, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({9})
					//->nextLayerIndices({11})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(11)
					->name("pool3")
					->poolDim(poolKernel, poolKernel, (poolKernel-1)/2, 2)
					->poolingType(PoolingType::Avg)
					//->prevLayerIndices({10})
					//->nextLayerIndices({12})
					)


			// 4
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(12)
					->name("conv4_1")
					->filterDim(3, 3, 256, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({11})
					//->nextLayerIndices({13})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(13)
					->name("conv4_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({12})
					//->nextLayerIndices({14})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(14)
					->name("conv4_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({13})
					//->nextLayerIndices({15})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(15)
					->name("conv4_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({14})
					//->nextLayerIndices({16})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(16)
					->name("pool4")
					->poolDim(poolKernel, poolKernel, (poolKernel-1)/2, 2)
					->poolingType(PoolingType::Avg)
					//->prevLayerIndices({15})
					//->nextLayerIndices({17})
					)


			// 5
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(17)
					->name("conv5_1")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({16})
					//->nextLayerIndices({18})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(18)
					->name("conv5_2")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({17})
					//->nextLayerIndices({19})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(19)
					->name("conv5_3")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({18})
					//->nextLayerIndices({20})
					)
			->layer((new typename ConvLayer<Dtype>::Builder())
					->id(20)
					->name("conv5_4")
					->filterDim(3, 3, 512, 512, 1, 1)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					//->activationType(Activation<Dtype>::ReLU)
					//->prevLayerIndices({19})
					//->nextLayerIndices({21})
					)
			->layer((new typename PoolingLayer<Dtype>::Builder())
					->id(21)
					->name("pool5")
					->poolDim(poolKernel, poolKernel, (poolKernel-1)/2, 2)
					->poolingType(PoolingType::Avg)
					//->prevLayerIndices({20})
					//->nextLayerIndices({24})
					)
					*/

			// FC
					/*
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(22)
					->name("fc6")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->activationType(Activation<Dtype>::Type::ReLU)
					->prevLayerIndices({21})
					->nextLayerIndices({23}))
			->layer((new typename FullyConnectedLayer<Dtype>::Builder())
					->id(23)
					->name("fc7")
					->nOut(4096)
					->pDropout(0.5)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, weight_const)
					->biasFiller(ParamFillerType::Constant, bias_const)
					->activationType(Activation<Dtype>::Type::ReLU)
					->prevLayerIndices({22})
					->nextLayerIndices({24}))
					*/
					/*
			->layer((new typename SoftmaxLayer<Dtype>::Builder())
					->id(24)
					->name("softmaxLayer")
					->nOut(1)
					->pDropout(0.0)
					->weightUpdateParam(1, 1)
					->biasUpdateParam(2, 0)
					->weightFiller(ParamFillerType::Xavier, 0.1)
					//->weightFiller(ParamFillerType::Constant, weight_const)
					//->weightFiller(ParamFillerType::Gaussian, 0.05)
					->biasFiller(ParamFillerType::Constant, 0.0)
					//->prevLayerIndices({21})
					)
					*/
/*
			->build();

	return layersConfig;
}
*/

#endif

#endif
